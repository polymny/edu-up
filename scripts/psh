#!/usr/bin/env bash
trap 'kill $(jobs -p)' EXIT SIGINT

# USAGE:
#   header
#
# EXAMPLE:
#   header
header() {
    echo ffmpeg -nostats -loglevel error -hide_banner -y
}

# USAGE:
#   header_progress
#
# EXAMPLE:
#   header_progress
header_progress() {
    echo ffmpeg -nostdin -nostats -progress pipe:1 -loglevel error -hide_banner -y
}

params_black_video(){
    duration=$1
    output=$2

    vcodec=$vcodec264
    vcodec_opts="-crf 15"
    fps="25"

    acodec="aac"
    arate="48000"
    abitrate="128k"
    echo -n \
        -f lavfi -i color=c=black:s=1920x1080:rate=25 \
        -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=$arate \
        -t $duration \
        -vsync cfr \
        -pix_fmt yuv420p \
        -vcodec $vcodec $vcodec_opts\
        -tune stillimage \
        -acodec $acodec \
        -ar $arate \
        -ac 2 \
        -b:a $abitrate \
        -s hd1080 \
        $output

}

generate_black_video(){
    duration=$1
    output=$2
    command=$(header && params_black_video $duration $output)
    $command
    if (( $? != 0 )); then
        echo "error with $1" >&2
        return $1
    fi

}

# USAGE:
#   transcode_with_silent_audio_track  <input_path> <output_path>
#
# EXAMPLE:
#   transcode_video  invideo.mp4   outvideo.mp4
transcode_with_silent_audio_track() {

    local input=$1
    local output=$2

    acodec="aac"
    arate="48000"
    abitrate="128k"

    echo "-i $input \
        -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=48000 \
        -shortest \
        -acodec $acodec  \
        -ar $arate \
        -ac 2 \
        -b:a $abitrate \
        -max_muxing_queue_size 2048 \
        $output"

}
# USAGE:
#   transocode_video  <input_path> <output_path>
#
# EXAMPLE:
#   transcode_video  invideo.mp4  mode  tmp/video.mp4
transcode_video() {

    input=$1
    mode=$2
    output=$3

    fps="25"
    vcodec="$vcodec264"
    vcodec_opts="-crf 15"
    acodec="aac"
    arate="48000"
    abitrate="128k"

    input_width=$(get_width $input)
    if [ "$input_width" -gt "1920" ]; then
        scalew="min'(1920,iw)'"
    else
        scalew="max'(1920,iw)'"
    fi

    input_height=$(get_height $input)
    if [ "$input_height" -gt "1080" ]; then
        scaleh="min'(1080,ih)'"
    else
        scaleh="max'(1080,ih)'"
    fi

    filterv="scale=${scalew}:${scaleh}:force_original_aspect_ratio=decrease,pad=1920:1080:-1:-1:color=black,setsar=1:1,fps=fps=$fps"
    case $mode in
        "silent")
            echo -n -i $input \
            -f lavfi -i anullsrc=channel_layout=stereo:sample_rate=48000 \
            -filter:v $filterv\
            -shortest \
            ;;
        "blob")
            echo -n -i $input \
            -filter:v fps=fps=$fps
            ;;
        *)
            echo -n -i $input \
            -filter:v $filterv\

            ;;
    esac

    echo " -vsync cfr \
        -pix_fmt yuv420p \
        -vcodec $vcodec $vcodec_opts \
        -acodec $acodec  \
        -ar $arate \
        -ac 2 \
        -b:a $abitrate \
        -max_muxing_queue_size 2048 \
        $output"

}


get_overlay()
{
    webcam_settings=$1
    shift
    position=( $(echo $webcam_settings | jq -cr ".position[]") )
    case $(echo $webcam_settings | jq -cr ".anchor") in
        "top_left" )
            overlay=$(printf "%s:%s" "${position[0]}" "${position[1]}")
            ;;
        "top_right" )
            overlay=$(printf "W-w-%s:%s" "${position[0]}" "${position[1]}")
            ;;
        "bottom_left" )
            overlay=$(printf "%s:H-h-%s" "${position[0]}" "${position[1]}")
            ;;
        "bottom_right" )
            overlay=$(printf "W-w-%s:H-h-%s" "${position[0]}" "${position[1]}")
            ;;
        *)
            overlay=$(printf "%s:H-h-%s" "${position[0]}" "${position[1]}")
            ;;
    esac
    echo $overlay
}

get_webcam_size()
{
    webcam_settings=$1

    echo $(printf "%s:-1" $(echo $webcam_settings | jq -cr ".size[0]") )
}

get_alpha()
{
    echo  $(echo $1| jq -cr ".opacity")
}

get_keycolor()
{

    echo  $(echo $1| jq -cr ".keycolor")
}

video_stream() {
    res=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height,sample_aspect_ratio,display_aspect_ratio -of json=c=1 $1)
    res=$(echo $res | jq ".streams[]")
    echo "$res"
}
get_width() {
    res=$(video_stream $1)
    echo $(echo $res | jq -r ".width")
}

get_height() {
    res=$(video_stream $1)
    echo $(echo $res | jq -r ".height")
}


get_aspect_ratio() {
    res=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height,sample_aspect_ratio,display_aspect_ratio -of json=c=1 $1)
    res=$(echo $res | jq ".streams[]")
    dar=$(echo $res | jq -r ".display_aspect_ratio")
    width=$(echo $res | jq -r ".width")
    height=$(echo $res | jq -r ".height")
    case $dar in
        "4:3")
            echo "4:3"
            ;;

        "16:9")
            echo "16:9"
            ;;
        "null")
            if [ $(( $width * 3 )) -eq $(( $height * 4 )) ]; then
                echo "4:3"
            elif [ $(( $width * 9 )) -eq $(( $height * 16 )) ]; then
                echo "16:9"
            else
                echo "unknown"
            fi
        ;;

        *)
            echo "unknown"
            ;;
    esac

}

colorkey(){
    colorkey_color="$1"
    # color key params
    colorkey_similarity="0.3"
    colorkey_blend="0.2"
    colorkey="colorkey=$colorkey_color:$colorkey_similarity:$colorkey_blend"
    despill="despill=green"
    echo "$colorkey,$despill"
}

pointerkey(){
    colorkey_color="$1"
    # color key params
    colorkey_similarity="0.3"
    colorkey_blend="0.2"
    colorkey="colorkey=$colorkey_color:$colorkey_similarity:$colorkey_blend"
    despill="despill=$1"
    echo "$colorkey,$despill"
}

# USAGE:
#   params_pip_slide_record  <slide_path> <record_path> <duration> <output_path>
#
# EXAMPLE:
# TODO
params_pip_slide_record() {

    slide=$1
    shift

    record=$1
    shift

    duration=$1
    shift

    webcam_settings=$1
    shift

    pointer_overlay=$1
    shift

    output=$1
    shift


    width_slide="1920"
    height_slide="1080"

    vcodec=$vcodec264
    vcodec_opts="-crf 15"

    acodec="aac"
    arate="48000"
    abitrate="128k"
    composition_type=$(echo "$webcam_settings"| jq -cr ".type")

    keying_filter="null"
    color=$(get_keycolor "$webcam_settings")

    if [[  "$color" != "null" ]]; then
        keying_filter=$(colorkey $color)
    fi
    pointer_filter=$(colorkey black)

    fade_filter=$(get_fadefilter "$gos" "$duration")
    case $composition_type in
         "pip" )
            webcam_alpha=$(get_alpha "$webcam_settings")
            size=$(echo "$webcam_settings" | jq -cr ".size[0]")
            webcam_size=$(get_webcam_size "$webcam_settings")
            webcam_overlay=$(get_overlay "$webcam_settings")
            scale_record="scale=${webcam_size},format=argb,colorchannelmixer=aa=${webcam_alpha}"
            if [[ "$pointer_overlay" == "null" ]] ; then
                inputs="-i $slide -i $record "
                filter_complex="[0]scale=$width_slide:$height_slide[slide];[1]$keying_filter,$scale_record[record];[slide][record]overlay=$webcam_overlay,$fade_filter,fps=fps=$fps[vout]"
            else
                inputs="-i $slide -i $record -i $pointer_overlay "
                filter_complex="[0]scale=$width_slide:$height_slide[slide];[1]$keying_filter,$scale_record[record];[2]$pointer_filter[pointer];[slide][record]overlay=$webcam_overlay[pip];[pip][pointer]overlay=0:0,$fade_filter,fps=fps=$fps[vout]"

            fi
            echo -n -fflags \
                     +genpts \
                     $inputs \
                    -filter_complex "$filter_complex" \
                    -map [vout] \
                    -map 1:a
            ;;

        "fullscreen" )
            record_alpha=$(get_alpha "$webcam_settings")
            overlay="0:0"
            aspect_ratio=$(get_aspect_ratio $record)
            case $aspect_ratio in
                "4:3")
                    record_filter="[1]$keying_filter,scale=1440:-1:flags=lanczos,format=argb,colorchannelmixer=aa=${record_alpha}[record]"
                    overlay="(W-w)/2:0"
                    ;;
                "16/9")
                    record_filter="[1]$keying_filter,scale=${width_slide}:-1:flags=lanczos,format=argb,colorchannelmixer=aa=${record_alpha}[record]"
                    overlay="0:0"
                    ;;

                *)
                    record_filter="[1]$keying_filter,scale=${width_slide}:-1:flags=lanczos,format=argb,colorchannelmixer=aa=${record_alpha}[record]"
                    overlay="(W-w)/2:(H-h)/2"
                    ;;

            esac
            filter_complex="[0]scale=$width_slide:$height_slide[slide];${record_filter};[slide][record]overlay=$overlay,$fade_filter,fps=fps=$fps[vout]"

            echo -n -fflags \
                 +genpts \
                 -i $slide \
                 -i $record \
                 -filter_complex "$filter_complex"\
                 -map [vout] \
                 -map 1:a
            ;;


        "disabled" )
                 echo -n -fflags \
                 +genpts \
                 -i $slide \
                 -i $record \
                 -map 0:v \
                 -map 1:a
             ;;

        "slide" )
                 echo -n -fflags \
                 +genpts \
                 -f lavfi \
                 -i anullsrc=channel_layout=stereo:sample_rate=$arate \
                 -i $slide
             ;;

        *)
            return 1
            ;;
    esac
    echo -n " "
    echo -n -t $duration \
         -movflags \
         +faststart \
         -vsync cfr \
         -pix_fmt yuv420p \
         -vcodec $vcodec $vcodec_opts\
         -acodec $acodec \
         -ar $arate \
         -ac 2 \
         -b:a $abitrate \
         -s hd1080 \
         $output


}



# USAGE:
#   concat_slides  concat slides
#
# EXAMPLE:
#   concat_slides  tmp/concat_file_gos1.txt  tmp/slides.mp4
concat_slides() {
    cid=$1
    input=$2
    output=$3
    sameCodec=$4

    capsule_path=$(get_config "data_path")"/$cid"
    assets_path="${capsule_path}/assets"

    arate="48000"

    if [[ "$sameCodec" == "true" ]]; then
        echo -f concat \
             -safe 0 \
            -i $input \
            -movflags \
            +faststart \
            -vsync cfr \
            -pix_fmt yuv420p \
            -s hd1080 \
            -r 25 \
            $output
    else


         echo -n " "
         echo -f lavfi -t 0.1 -i anullsrc=channel_layout=stereo:sample_rate=48000 \

         asset="null"
         extension="png"
         count_slide=1

         local filter_complex1
         local filter_complex2
         local pad
         while read -ra line
         do
             case "${line[0]}" in
                 "file" )
                    filename=$(basename -- "${line[1]}")
                    extension="${filename##*.}"
                    filename="${filename%.*}"
                    asset=$filename

                    ;;
                "pad")
                    pad=${line[1]}
                    ;;
                 "duration")
                    if [[ "$extension" = "mp4" ]] ; then
                        ffmpeg_cmd=$(printf " -t %s -i %s " "${line[1]}" "$assets_path/$asset.$extension")
                        if [[ $pad ]] ; then
                            pad_filter="[$count_slide:v]tpad=stop_mode=clone:stop_duration=$pad[video$count_slide]"
                        else
                            pad_filter="[$count_slide]null[video$count_slide];"
                        fi
                            filter_complex1="${filter_complex1}${pad_filter};"
                            pad=''

                        concat_filter="[video$count_slide][$count_slide:a]"
                        filter_complex2="${filter_complex2}${concat_filter}"
                    else
                        ffmpeg_cmd=$(printf " -loop 1 -framerate 25 -t %s -i %s " "${line[1]}" "$assets_path/$asset.$extension")
                        sar_filter="[$count_slide:v]setsar=1/1[video$count_slide];"
                        filter_complex1="${filter_complex1}${sar_filter}"
                        concat_filter="[video$count_slide][0:a]"
                        filter_complex2="${filter_complex2}${concat_filter}"
                    fi
                    echo $ffmpeg_cmd

                    count_slide=$((count_slide+1))
                    ;;

                *)
                    ;;
             esac
         done <"$input"

        count_slide=$((count_slide-1))
         #filter_complex="[0:v]setsar=1/1[sar0];[2:v]setsar=1/1[sar2];[3:v]setsar=1/1[sar3];[sar0][4:a][1:v][1:a][sar2][4:a][sar3][4:a]concat=n=4:v=1:a=1"
         #filter_complex="${filter_complex1}[4:a]acopy[silence];${filter_complex2}concat=n=${count_slide}:v=1:a=1"
         filter_complex="${filter_complex1}${filter_complex2}concat=n=${count_slide}:v=1:a=1"

         echo -n " "
         echo -filter_complex "$filter_complex" \
            -pix_fmt yuv420p \
            -s hd1080 \
            $output
    fi

}

# USAGE:
#   concat_goss <path to list of file to conat> <output>
#
# EXAMPLE:
#   concat_goss  tmp/seq_file.txt  tmp/capsule.mp4
concat_goss() {

    input=$1
    shift
    output=$1
    shift

    echo -f concat \
         -safe 0 \
         -i $input \
         -c copy \
         -movflags \
         +faststart \
         $output

}



# USAGE:
#   Returns audio and video fadea filters
#   filter_complex syntax
#
# EXAMPLE
# get_fadefilter $gos "12456ms"
#
get_fadefilter() {

    local gos=$1
    local duration_s=$(echo "scale=3; ${2::-2}/1000" |bc)

    afadein=$(echo "$gos"  | jq -cr ".fade.afadein")
    afadeout=$(echo "$gos" | jq -cr ".fade.afadeout")
    vfadein=$(echo "$gos"  | jq -cr ".fade.vfadein")
    vfadeout=$(echo "$gos" | jq -cr ".fade.vfadeout")

    if [[ $afadeout != "null" ]] ; then
        st=$(echo "$duration_s -$afadeout" |bc)
        aoutfitler="afade=t=out:st=$st:d=$afadeout"
        if [[ $afadein != "null" ]] ; then
            ainfitler="afade=t=in:st=0:d=$afadein"
            afilter="$ainfitler,$aoutfitler"
        else
            afilter="$aoutfitler"
        fi
    else
        if [[ $afadein != "null" ]] ; then
            ainfitler="afade=t=in:st=0:d=$afadein"
            afilter="$ainfitler"
        fi
    fi

    if [[ $vfadeout != "null" ]] ; then
        st=$(echo "$duration_s -$vfadeout" |bc)
        voutfitler="fade=t=out:st=$st:d=$vfadeout"
        if [[ $vfadein != "null" ]] ; then
            vinfitler="fade=t=in:st=0:d=$vfadein"
            vfilter="$vinfitler,$voutfitler"
        else
            vfilter="$voutfitler"
        fi
    else
         if [[ $vfadein != "null" ]] ; then
            vinfitler="fade=t=in:st=0:d=$vfadein"
            vfilter="$vinfitler"
         fi
    fi
    if [[ -n $afilter ]] ; then
        if [[ -n $vfilter ]] ; then
            filter="$afilter;$vfilter"
        else
            filter="$afilter"
        fi
    else
        if [[ -n $vfilter ]] ; then
            filter="$vfilter"
        else
            filter="null"
        fi
    fi

    echo $filter
}


# USAGE:
#   miniatures <input> <miniature> <output>
# EXAMPLE:
#   miniatures video.mkv 12233 video
miniatures() {
    input=$1
    duration=$2
    output=$3
    middle=$(echo 'scale=6;' $duration ' / 2' | bc)
    if [ "${middle:0:1}" = "." ] ; then
        middle="0"
    fi

    width="400"
    filter="scale=$width:-1"
    echo -i $input \
        -vf $filter \
        -ss $middle \
        -vframes 1 \
        $output
}

# Get vars from Config.toml
# USAGE:
#   get_config <config_path>
# EXAMPLE:
#   get_config "url"
get_config(){
    get_config_raw $1 | cut -d '"' -f 2
}

# Get vars from Config.toml
# USAGE:
#   get_config <config_path>
# EXAMPLE:
#   get_config "url"
get_config_raw() {
    config=$1
    while [ ! -f Rocket.toml ]; do
        cd ..

        if [ "$PWD" == "/" ]; then
            echo -e >&2 "\033[31;1merror:\033[0m unable to find a Rocket.toml"
            exit 1
        fi
    done
    echo $(cat Rocket.toml | grep $config | cut -d '=' -f 2 | tr -d ' ')
}

# USAGE:
#   get_duration  <video_path>
#
# EXAMPLE:
#   get_duration  tmp/video.mp4
get_duration() {
    input=$1
    duration=$(ffprobe -loglevel quiet -of 'compact=nokey=1:print_section=0' -show_entries format=duration $input)

    if [[ "$duration" == "N/A" ]]; then
        dir=$(mktemp -d)
        ffmpeg -i $input -vcodec copy -acodec copy $dir/tmp.webm > /dev/null 2>&1
        duration=$(ffprobe -loglevel quiet -of 'compact=nokey=1:print_section=0' -show_entries format=duration $dir/tmp.webm)
        rm -r $dir
    fi

    echo $duration
}


get_video_size() {
    ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 $1
}



video-type() {

    input=$1
    test_audio_streams="$(ffprobe -hide_banner -loglevel error -show_streams -select_streams a -of 'compact' $input | wc -c)"
    test_video_streams="$(ffprobe -hide_banner -loglevel error -show_streams -select_streams v -of 'compact' $input | wc -c)"
    if [ $test_audio_streams -eq  0 ] ; then
        if [ $test_video_streams -eq  0 ] ; then
            echo "nothing"
        else
            echo "video_only"
        fi
    else
        if [ $test_video_streams -eq  0 ] ; then
            echo "audio_only"
        else
            echo "audio_and_video"
        fi

    fi

}
# transcode records
# USAGE:
#   transcode_records <capsule id>
# EXAMPLE:
#   transcode_records 42
transcode_records(){
    cid=$1

    capsule_path=$(get_config "data_path")"/$cid"
    assets_path="${capsule_path}/assets"
    tmp_path="${capsule_path}/tmp"
    if [ ! -d "$tmp_path" ]; then
        mkdir $tmp_path
    fi

    records="$(echo "$capsule_structure" | jq -r '.[] | .record.uuid')"
    for i in $records
    do
        if [ $i = "null" ] ; then
            continue
        fi
        input="${assets_path}/$i.webm"
        output="$tmp_path/$i.mp4"

        if [ -f $output ] ; then
            continue
        fi

        command=$(header && transcode_video $input "blob" $output)
        echo $command
        START_TIME=$SECONDS
        $command
        if (( $? != 0 )); then
            echo "error with $1" >&2
            return $1
        fi

        ELAPSED_TIME=$(($SECONDS - $START_TIME))
        duration=$(get_duration $output)
        printf 'trancode duration = %s - record duration =%s  \n' "$ELAPSED_TIME" "$duration"

        output="$tmp_path/$i.png"
        command=$(header && miniatures $input  $duration $output)
        echo $command
        $command
        if (( $? != 0 )); then
            echo "error with $1" >&2
            return $1
        fi

    done

}

show_ffmpeg_progression(){
    local line=$1
    local duration_ms=$2
    IFS='=' read -ra progress <<< $line
    case "${progress[0]}" in
        "out_time_us" )
            ts="${progress[1]}"
            percent_progress=$(echo "scale=6; $ts/$duration_ms" | bc -l)
            is_great=$(echo "$percent_progress > 1" | bc)
            if [ $is_great -eq 1 ]; then
                percent_progress="1"
            fi
            ;;
        "progress" )
            if [[ "${progress[1]}" == "end" ]] ; then
                percent_progress="1"
            fi
            ;;
        *)
            ;;
    esac
    echo $percent_progress
}



run_ffmpeg_slide(){
    local cmd=$1
    local duration_ms=$2
    local gos_i=$3
    local nb_gos=$4
    local step_i=$5
    local nb_step=$6


    local percent_progress="0"
    #DEBUG echo "$cmd">&2

    $cmd | while read line; do
        local percent_progress=$(show_ffmpeg_progression $line $(echo "$duration_ms*1000" |bc )  )
        slide_progress=$(echo "scale=3; $step_i/$nb_step + (1/$nb_step)*$percent_progress " |bc -l)

        if (( $nb_gos == -1 )) ; then
            # case of one GoS production
            progress=$slide_progress
        else
            # case of complete productuin (GoS by GoS)
            progress=$(echo "scale=3; $gos_i/$nb_gos +  (1/$nb_gos)*($slide_progress) " |bc -l)
        fi
        echo -en "\n$progress"
    done


    if (( $? != 0 )); then
        echo "error with $1" >&2
        return 1
    fi


}

compose_gos(){
    local cid=$1
    local gos_i=$2
    local nb_gos=$3
    local seq_file_gos=$4
    SLIDE_DEFAULT_DURATION="3"


    capsule_path=$(get_config "data_path")"/$cid"
    assets_path="${capsule_path}/assets"
    tmp_path="${capsule_path}/tmp"

    gos=$(echo "$capsule_structure" | jq .[$gos_i])
    record=$(echo "$gos" | jq -cr ".record.uuid")

    len_slides=$(echo "$capsule_structure" | jq ".[$gos_i].slides|length" )
    if [[ "$record" == "null" ]] ; then
        webcam_settings=$( echo '{"type" :"slide"}' | jq  ".")
        transitions=( 0 )
        input_record="${assets_path}/null.webm"
    else
        transitions=( 0 $(echo "$gos" | jq -cr ".events[] | select(.ty==\"next_slide\" or .ty==\"end\") | .time") )
        webcam_settings=$(echo "$gos" | jq  ".webcam_settings")
        input_record="${assets_path}/$record.webm"
    fi

    pointer=$(echo "$gos" | jq -cr ".record.pointer_uuid")
    if [[ "$pointer" == "null" ]] ; then
            input_pointer="null"
    else
        input_pointer="${assets_path}/$pointer.webm"
    fi

    concat_file="$tmp_path/slides_gos$gos_i.txt"
    echo "ffconcat version 1.0" > $concat_file


    # used to check if GoS in composed of same kind of content
    # for instance onnly slide(s) or extra video(s)
    branchSlide="true"
    branchExtra="true"
    for (( slide_i = 0 ; slide_i < $len_slides ; slide_i++ ));
    do
        slide=$(echo "$capsule_structure" | jq .[$gos_i].slides[$slide_i])
        uuid=$(echo $slide |  jq  -rc ".uuid")
        input_slide="${assets_path}/${uuid}.png"

        extra=$(echo "$slide" |  jq  -rc ".extra")
        echo_header=$(printf "GOS %3s slide %3s "   "$(( $gos_i+1 ))" "$(( $slide_i+1 ))" )
        # DEBUG echo $echo_header >&2


        if [[ "$extra" == "null" ]] ; then
            branchExtra="false"
            # No extra resource : compose slide with record
             input_slide="${assets_path}/${uuid}.png"

            if [[ "$record" == "null" ]] ; then
                # Only slide no records
                #TODO check behavior of GoS with multiple empty slides
                slide_duration=$(echo "($SLIDE_DEFAULT_DURATION*1000)/1" | bc)
            else
                if (( $slide_i +1 < ${#transitions[@]} )) ; then
                    # the slide have a transition and a record
                    slide_duration=$(( ${transitions[(($slide_i+1))]} -1 -${transitions[$slide_i]} ))
                else
                    # Robustness in case of missing event or transition
                    slide_duration=$(echo "($SLIDE_DEFAULT_DURATION*1000)/1" | bc)
                fi
            fi

            output="slide_${gos_i}_${slide_i}.mp4"
            line_in_concat_file="file ../assets/${uuid}.png"
            echo $line_in_concat_file  >> $concat_file
            echo "duration ${slide_duration}ms" >> $concat_file
            # when only one lside: no concat. for ffmpeg concat: repeat "file .." line
            # kinda bug in ffmpeg
            if (( $len_slides == 1 )) ;then
                echo $line_in_concat_file  >> $concat_file
            fi
        else
            branchSlide="false"
            # FIXME: mix video resource with record
            printf '\n%s %3s %%' "$echo_header" "100"
            line_in_concat_file="file ../assets/${extra}.mp4"
            echo $line_in_concat_file  >> $concat_file

            extra_duration=$(get_duration "$assets_path/${extra}.mp4")
            extra_duration=$(echo "($extra_duration*1000)/1" |bc)
            if (( $slide_i +1 < ${#transitions[@]} )) ; then
                # the slide have a transition and a record

                slide_duration=$(( ${transitions[(($slide_i+1))]} -1 -${transitions[$slide_i]} ))
                if (( $slide_duration > $extra_duration )); then
                    # record is longer then extra video duration
                    # pad with last frame extra
                    pad=$(($slide_duration - $extra_duration))
                    echo "pad ${pad}ms" >> $concat_file
                fi
                echo "duration ${slide_duration}ms" >> $concat_file
            else
                # manage case of all slides transitions not done in GOS record
                # add empty slides
                #TODO check behavior of GoS with multiple empty slides
                transitions+=( "$extra_duration" )
                echo "duration ${extra_duration}ms" >> $concat_file
            fi
        fi

        extra=$(echo "$slide" |  jq  -rc ".extra")
        echo_header=$(printf "GOS %3s slide %3s "   "$(( $gos_i+1 ))" "$(( $slide_i+1 ))" )
        echo "$echo_header" >&2

    done

    if [ "$branchSlide" == "true" ] || [ "$branchExtra" == "true" ]; then
        sameCodec="true"
    else
        sameCodec="false"
    fi


    # repeat last entry (FFMPEG required kinda end of file)
    #echo $line_in_concat_file  >> $concat_file

    duration_ms=${transitions[-1]}
    if [[ "$duration_ms" == 0 ]]; then
       duration_ms=$(echo "($SLIDE_DEFAULT_DURATION*1000)/1" | bc)
    fi



    # Step 1 / 2 :  concat slides
    video_slides="$capsule_path/tmp/slides_gos${gos_i}.mp4"
    cmd=$(header_progress && concat_slides  $cid $concat_file $video_slides $sameCodec)
    run_ffmpeg_slide "$cmd" "$duration_ms" $gos_i $nb_gos 0 2

    # Step 2 / 2: ovelay slides / webcam record /pointer
    output_gos="gos_${gos_i}.mp4"

    if [[ "$record" == "null" ]] ; then
        # No compostion to perform : add silent audio track to slide
        cmd=$(header && transcode_with_silent_audio_track "$video_slides" "${tmp_path}/$output_gos")
        #DEBUG echo $cmd >&2
        $cmd

    else
        cmd=$(header_progress && params_pip_slide_record $video_slides $input_record "${duration_ms}ms" "$webcam_settings" $input_pointer "${tmp_path}/$output_gos")
        total_frames=$(echo "($slide_duration*25)/1000" | bc)

        run_ffmpeg_slide "$cmd" "$duration_ms" $gos_i $nb_gos 1 2
    fi
    echo "file '$output_gos'" >> $seq_file
}

# combine slide and records
# USAGE:
#   compose_goss <capsule id> <gos id>
# EXAMPLE:
#   compose_goss 42 -1 for all gos
#   compose_goss 42 2 for gos 2 only

compose_goss(){
    local cid=$1
    local gosid=$2
    local track=$3

    local start=`date +%s`
    capsule_path=$(get_config "data_path")"/$cid"
    tmp_path="${capsule_path}/tmp"
    fps="25"
    if [ ! -d $tmp_path ]; then
        mkdir $tmp_path
    fi

    seq_file="$tmp_path/seq_file.txt"
    echo "ffconcat version 1.0" > $seq_file
    if (( $gosid == -1 )) ; then
        # GOS loop
        len=$(echo $capsule_structure | jq  '.|length')
        for (( gos_i = 0 ; gos_i < $len ; gos_i++ ));
        do
            compose_gos $cid $gos_i $len $seq_file
        done
        output="$capsule_path/output.mp4"
        command=$(header && concat_goss $seq_file $output)
        $command
        if (( $? != 0 )); then
            echo "error with $1" >&2
            echo $command >&2

            return 1
        fi

        # Add audio track
        if [[ $track != "null" ]]; then
            echo "Adding audio track" >&2

            # `$track` is like `uuid:volume`
            track_uuid=$(echo $track | cut -d':' -f1)
            track_volume=$(echo $track | cut -d':' -f2)

            # Get path to the audio track
            track_path="$capsule_path/assets/$track_uuid.m4a"

            # Get duration of the input video
            video_duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$output")
            track_duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$track_path")

            # Create fade in/out filter
            fade_duration=1.0
            fadeout_start=$(echo "$track_duration - $fade_duration" | bc)
            fade_filter="afade=t=in:st=0:d=$fade_duration,afade=t=out:st=$fadeout_start:d=$fade_duration"

            # Concatenate the audio track to repeat it for the entire duration of the video
            fade_filter_inputs=""
            fade_filter_outputs=""
            duration=$video_duration
            counter=0
            while [[ $(echo "$duration > 0" | bc -l) -eq 1 ]]; do
                fade_filter_inputs+="[1:a]$fade_filter[fade$counter];"
                fade_filter_outputs+="[fade$counter]"
                duration=$(echo "$duration - $track_duration" | bc)
                counter=$((counter+1))
            done

            # Add final fade out
            fadeout_start=$(echo "$video_duration - $fade_duration" | bc)

            # Use ffmpeg to add the audio track to the video
            ffmpeg -y -i "$output" -i "$track_path" \
            -filter_complex " \
                $fade_filter_inputs \
                $fade_filter_outputs concat=n=$counter:v=0:a=1[concat]; \
                [concat]volume=$track_volume[volume]; \
                [volume]afade=t=out:st=$fadeout_start:d=$fade_duration[fade]; \
                [0:a][fade]amerge=inputs=2[out] \
            " \
            -map 0:v \
            -map "[out]" \
            -c:v copy \
            -c:a aac \
            -shortest \
            -loglevel error \
            "$output.mp4"

            # Replace the original video with the new one
            mv $output.mp4 $output
        fi

        local end=`date +%s`
        duration=$(get_duration $output)
        runtime=$( echo "$end - $start" | bc -l )
        compute_ratio=$( echo "scale=3; $runtime / $duration" |bc -l)
        compute_ratio_by_min=$( echo "scale=1; $compute_ratio*60" |bc -l)
        echo "runtime = $runtime s -- video duration = $duration s"  >&2
        echo "compute_ratio $compute_ratio -- Time passed to produced 1 min of video $compute_ratio_by_min s" >&2
    else
        compose_gos $cid $gosid -1 $seq_file
    fi



}


# USAGE:
#   on-record <capsule-id> <uuid>
#
# EXAMPLE:
#   on-record 23 cdebb5e4-ce26-42d5-98ba-41c76f71f08
on-record() {
    cid=$1
    uuid=$2

    capsule_path=$(get_config "data_path")"/$cid"
    tmp_path="${capsule_path}/tmp"
    if [ ! -d "$tmp_path" ]; then
        mkdir $tmp_path
    fi

    input="${capsule_path}/assets/${uuid}.webm"
    video_type=$(video-type $input)

    case $video_type in
        "video_only" | "audio_and_video" )
            output="${capsule_path}/assets/${uuid}.png"
            duration="0.000000"

            command=$(header && miniatures $input  $duration $output)
            $command
            if (( $? != 0 )); then
                echo "error with $1" >&2
            return $1
            fi

            get_video_size $input
            ;;
        *)
            ;;
    esac
}


# USAGE:
#   on-produce <capule_id>
#     and stdin
#
# EXAMPLE:
#
on-produce() {
    local cid=$1
    local gosid=$2
    local track=$3

    #transcode_records $cid
    echo "Composition start for capsule $cid and gos $gosid" >&2
    compose_goss $cid $gosid $track
    echo "Composition end for capsule $cid and gos $gosid" >&2
}

# USAGE:
#   on-video-upload <video-in> <video-out>
#
# EXAMPLE:
#
on-video-upload() {
    local input=$1
    local output=$2
    video_type=$(video-type $input)
    duration=$(get_duration $input)
    case $video_type in
        "video_only")
            cmd=$(header_progress && transcode_video $input "silent" $output)
            ;;
        *)
            cmd=$(header_progress && transcode_video $input "standard" $output)
            ;;
    esac

    duration_ms=$(echo "$(get_duration $input)*1000000" | bc -l )

    local percent_progress="0"

    echo "$cmd">&2
    $cmd | while read line; do
        local percent_progress=$(show_ffmpeg_progression $line $duration_ms)
        echo -en "\n$percent_progress"
    done

    if (( $? != 0 )); then
        echo "error with $1" >&2
        return 1
    fi

}
# USAGE:
#  trancode_audio <input> <output>
#
# EXAMPLE:
#  trancode_audio input.xxx output.m4a
transcode_audio() {
    ffmpeg -i $1 -c:a aac -b:a 128k -ar 48000 $2
}
# USAGE:
#  format_time <time in milliseconds>
#
# EXAMPLE:
#  format_time 3600
format_time() {
    millis=$(($1 % 1000))
    total_seconds=$(($1 / 1000))
    seconds=$(($total_seconds % 60))
    minutes=$((($total_seconds / 60) % 60))
    hours=$(($total_seconds / 3600))
    printf "%02g:%02g:%02g.%03g\n" $hours $minutes $seconds $millis
}

# USAGE:
#  on-publish <input> <output> <generate_subtitles>
on-publish() {
    echo $@ >&2

    if [[ "$3" == "true" ]]; then
        ../../hls/hls --subtitles subtitles.webvtt $1 $2 360p 480p 720p
        len=$(echo $capsule_structure | jq -cr '.|length')
        slide_time=0
        vtt_output="$2/subtitles.webvtt"
        m3u8_output="$2/subtitles.m3u8"

        # Generate vtt file
        echo WEBVTT > $vtt_output
        echo "X-TIMESTAMP-MAP=MPEGTS:120000,LOCAL:00:00:00.000" >> $vtt_output
        echo >> $vtt_output

        for i in `seq 0 $(($len - 1))`; do
            last_time=0
            slide_index=0
            sentence_index=1

            record=$(echo $capsule_structure | jq -cr ".[$i].record")

            if [[ "$record" == "null" ]]; then
                for slide in $(echo $capsule_structure | jq -cr ".[$i].slides[].extra"); do
                    echo $slide >&2
                    if [[ "$slide" == "null" ]]; then
                        slide_time=$(($slide_time+3000))
                    else
                        echo $(dirname $1)/assets/$slide.mp4 >&2
                        duration_s=$(get_duration $(dirname $1)/assets/$slide.mp4)
                        duration=$(echo "scale=6; $duration_s * 1000" | bc | cut -d '.' -f 1)
                        slide_time=$(($slide_time+$duration))
                    fi
                done
            else
                for event in $(echo $capsule_structure | jq -cr ".[$i].events[]"); do
                    ty=$(echo $event | jq -cr ".ty")
                    time=$(echo $event | jq -cr ".time")

                    case $ty in
                        "start") continue;;
                    esac

                    echo `format_time $(($last_time+$slide_time))` "-->" `format_time $(($time+$slide_time))` >> $vtt_output
                    echo $capsule_structure | jq -cr ".[$i].slides[$slide_index].prompt" | sed "${sentence_index}q;d" >> $vtt_output
                    echo >> $vtt_output

                    last_time=$time

                    case $ty in
                        "next_slide") slide_index=$(($slide_index+1)); sentence_index=1;;
                        "next_sentence") sentence_index=$(($sentence_index+1));;
                        "end") slide_time=$(($slide_time+$time));;
                    esac
                done
            fi
        done

        echo "done" >&2
    else
        ../../hls/hls $1 $2 360p 480p 720p
    fi
}

pdf-to-png() {
    local input=$1
    local output=$2
    local density=$3
    local size=$4
    colorspace="sRGB"

    cmd=$(
        echo "convert \
        -density $density \
        -colorspace $colorspace \
        -resize $size \
        -background white \
        -gravity center \
        -extent $size \
        $input \
        $output"
    )
    #DEBUG: echo $cmd >&2
    $cmd
    if (( $? != 0 )); then
       echo "error with $1" >&2
       return $1
    fi

}

disk-usage() {
    local input=$1
    du -s --block-size=1M $input | cut -f1 2>/dev/null
    if (( $? != 0 )); then
       echo "disk-usage error with $@" >&2
       return 1
    fi


}

main() {
    # set codecs according graphic cards
    use_nvenc=$(get_config_raw use_nvenc)
    if [[ "$use_nvenc" == "true" ]]; then
        vcodec264="libx264"
        HWACCEL='nvidia'
        if [[ $HWACCEL == 'nvidia' ]]; then
            vcodec264="h264_nvenc"
        fi
    else
        vcodec264=libx264
    fi

    local command=$1
    shift
    case $command in
        "on-record")
            on-record "$@"
            ;;
        "on-video-upload")
            on-video-upload "$@"
            ;;
        "on-produce")
            read -r capsule_structure
            #DEBUG echo "$capsule_structure" | jq . >&2
            on-produce "$@"
            ;;
        "on-publish")
            read -r capsule_structure
            on-publish "$@"
            ;;
        "aspect-ratio")
            get_aspect_ratio "$@"
            ;;
        "duration")
            get_duration "$@"
            ;;

        "video-type")
            video-type "$@"
            ;;

        "pdf-to-png")
            pdf-to-png "$@"
            ;;

        "du")
            disk-usage "$@"
            ;;

        "black")
            generate_black_video "$@"
            ;;

        "transcode")
            cmd=$(header && transcode_video "$@")
            $cmd
            ;;
        
        "transcode-audio")
            transcode_audio "$@"
            ;;

        *)
            echo "UNKNONW OPTION "
            echo "$@"

    esac

}

main $@
